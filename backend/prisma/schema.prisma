// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_type {
  admin
  manager
}

// @admin
model user {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      user_type  @default(admin)
  isActive  Boolean    @default(true)
  category  category[]
  location  location[]
}

model category {
  id            String          @id @default(cuid())
  title         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          user            @relation(fields: userId, references: id)
  userId        String
  subCategory   subCategory[]
  sellerProfile sellerProfile[]
}

model subCategory {
  id                 String    @id @default(cuid())
  title              String    @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  platformCategory   category? @relation(fields: [platformCategoryID], references: [id])
  platformCategoryID String

  isComplted Boolean @default(false)
}

model location {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: userId, references: id)
  userId    String
  status    Boolean
}

//@seller

model sellerProfile {
  id         String              @id @default(cuid())
  storeName  String?
  slug       String?
  phone      String?
  category   category?           @relation(fields: [categoryId], references: [id])
  seller     seller              @relation(fields: [sellerId], references: [id])
  sellerId   String              @unique
  categoryId String?
  logo       Image?              @relation(fields: [logoId], references: [id])
  logoId     String?
  qrCode     qrCode?             @relation(fields: [qrCodeId], references: [id])
  qrCodeId   String?
  firstName  String?
  lastName   String?
  address    sellerAddress?
  account    sellerBankAccount[]
  gstIn      String?
}

enum loginMethod {
  email
  google
}

model seller {
  id             String           @id @default(cuid())
  email          String           @unique
  password       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           user_type        @default(admin)
  isActive       Boolean          @default(true)
  isMailVerified Boolean          @default(false)
  emailToken     String?          @unique
  sellerProfile  sellerProfile?
  status         Boolean          @default(true)
  sellerCategory sellerCategory[]

  loginSession         loginSession[]
  sellerWareHouse      sellerWareHouse[]
  loginMethod          loginMethod       @default(email)
  product              product[]
  coupon               coupon[]
  Image                Image[]
  uniqueGoogleId       String?           @unique
  isSellerKycCompleted Boolean           @default(false)
}

model loginSession {
  id         String      @id @default(cuid())
  user       seller      @relation(fields: userId, references: id)
  userId     String      @unique
  deviceInfo deviceInfo?
  latitude   String
  longitude  String
  deviceId   String
  city       String
  ipAddress  String
  token      String
  logout     Boolean     @default(false)
}

enum deviceType {
  web
  android
  ios
}

model deviceInfo {
  id             String       @id @default(cuid())
  user           loginSession @relation(fields: loginSessionId, references: id)
  loginSessionId String       @unique
  device         deviceType
}

model qrCode {
  id            String          @id @default(cuid())
  qrcode        String
  sellerProfile sellerProfile[]
}

model sellerAddress {
  addressLine1    String?
  addressLine2    String?
  landMark        String?
  state           String?
  city            String?
  pinCode         String?
  country         String?
  sellerProfile   sellerProfile @relation(fields: sellerProfileId, references: id)
  sellerProfileId String        @unique
}

model sellerBankAccount {
  id            String  @id @default(cuid())
  accountNumber String
  ifscCode      String
  bankName      String
  isPrimary     Boolean @default(false)

  sellerProfile   sellerProfile? @relation(fields: [sellerProfileId], references: [id])
  sellerProfileId String?
}

model Image {
  id             String           @id @default(cuid())
  url            String
  description    String
  caption        String
  alt            String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  seller         seller           @relation(fields: [sellerId], references: [id])
  mutipleImage   mutipleImage?
  sellerProfile  sellerProfile[]
  sellerId       String
  sellerCategory sellerCategory[]
  product        product[]
  array          allSize[]
  allColor       allColor[]
}

model mutipleImage {
  categoryImage    Image           @relation(fields: imageId, references: id)
  imageId          String          @unique
  sellerCategory   sellerCategory  @relation(fields: sellerCategoryId, references: id)
  sellerCategoryId String          @unique
  productVariant   productVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?
}

model sellerCategory {
  id            String         @id @default(cuid())
  sort          Int            @default(autoincrement())
  title         String
  description   String
  categoryImage Image          @relation(fields: [imageId], references: [id])
  seller        seller         @relation(fields: sellerId, references: id)
  sellerId      String
  sliderImage   mutipleImage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        Boolean        @default(true)
  imageId       String
  product       product[]
  coupon        coupon?        @relation(fields: [couponId], references: [id])
  couponId      String?
}

model sellerWareHouse {
  id           String   @id @default(cuid())
  gstIn        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  seller       seller?  @relation(fields: [sellerId], references: [id])
  sellerId     String
  addressLine1 String
  addressLine2 String
  landMark     String
  state        String
  city         String
  pinCode      String
  status       Boolean  @default(true)
}

model list {
  id               String          @id @default(cuid())
  title            String
  description      String
  ListOrder        ListOrder?
  productDetails   productDetails? @relation(fields: [productDetailsId], references: [id])
  productDetailsId String?
}

model ListOrder {
  id               String          @id @default(cuid())
  title            String
  list             list?           @relation(fields: listId, references: id)
  listId           String?         @unique
  productDetails   productDetails? @relation(fields: [productDetailsId], references: [id])
  productDetailsId String?
}

model productDetails {
  id              String      @id @default(cuid())
  highlights      list[]
  Specifications  ListOrder[]
  product         product?    @relation(fields: [productId], references: [id])
  legalDisclaimer String
  productId       String?     @unique
}

model productSizeChart {
  id        String  @id @default(cuid())
  product   product @relation(fields: [productId], references: [id])
  productId String  @unique
}

model product {
  id              String           @id @default(cuid())
  productName     String
  productCategory sellerCategory   @relation(fields: [sellerCategoryId], references: [id])
  productImage    Image?           @relation(fields: [imageId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  seller          seller?          @relation(fields: [sellerId], references: [id])
  sellerId        String
  brandName       String
  status          Boolean          @default(false)
  productVariant  productVariant[]

  productReview    productReview?
  productDetails   productDetails?
  isCancellable    Boolean           @default(false)
  isRefunable      Boolean           @default(false)
  imageId          String?
  sellerCategoryId String
  productColor     productColor?
  productSize      productSize?
  productSizeChart productSizeChart?
  coupon           coupon?           @relation(fields: [couponId], references: [id])
  couponId         String?
  free             free[]
}

model productColor {
  id        String  @id @default(cuid())
  image     String?
  title     String
  productId String  @unique

  array allColor[]

  product product @relation(fields: [productId], references: [id])
}

model productSize {
  id        String  @id @default(cuid())
  image     String?
  title     String
  productId String  @unique

  array   allSize[]
  product product   @relation(fields: [productId], references: [id])
}

model allSize {
  id            String           @id @default(cuid())
  title         String
  img           Image?           @relation(fields: [imageId], references: [id])
  imageId       String?
  productSize   productSize?     @relation(fields: [productSizeId], references: [id])
  productSizeId String?
  variant       productVariant[]
}

model allColor {
  id             String           @id @default(cuid())
  title          String
  img            Image?           @relation(fields: [imageId], references: [id])
  imageId        String?
  productColor   productColor?    @relation(fields: [productColorId], references: [id])
  productColorId String?
  productVariant productVariant[]
}

model productReview {
  id          String   @id @default(cuid())
  productName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Int
  title       String
  description String
  prouct      product? @relation(fields: [productId], references: [id])
  productId   String?  @unique
}

model productVariant {
  id         String         @id @default(cuid())
  status     Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  stock      Decimal
  mrp        Decimal
  price      Decimal
  sku        Int?
  images     mutipleImage[]
  product    product?       @relation(fields: [productId], references: [id])
  productId  String?
  size       allSize        @relation(fields: [sizeId], references: [id])
  sizeId     String
  color      allColor       @relation(fields: [allColorId], references: [id])
  allColorId String
}

enum couponType {
  percentage
  flat
  shipping
  free
  getOneFree
}

model percentage {
  id                String   @id @default(cuid())
  percentage        String
  minimumOrderValue Int
  maximum           Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model flat {
  id                String @id @default(cuid())
  discountAmount    String
  minimumOrderValue Int
  amount            Int
}

model shipping {
  id String @id @default(cuid())
}

model free {
  id          String   @id @default(cuid())
  product     product? @relation(fields: [productId], references: [id])
  productId   String?
  aboveAmmout Int
}

model getOneFree {
  id           String @id @default(cuid())
  buy          Int
  get          Int
  usesPerOrder Int
}

enum usesPerCostomer {
  once
  costom
  unlimited
}

enum couponOn {
  all
  product
  category
}

model coupon {
  id               String           @id @default(cuid())
  usesPerCostomer  usesPerCostomer
  usesNumer        Int?
  seller           seller           @relation(fields: [sellerId], references: [id])
  sellerId         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  startDate        DateTime
  enddate          DateTime?
  couponType       couponType
  couponName       String
  couponOn         String           @default("all")
  couponOnCategory sellerCategory[]
  couponOnProduct  product[]
}
