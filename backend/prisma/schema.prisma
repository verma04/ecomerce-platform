// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_type {
  admin
  manager
}

// @admin
model user {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  password          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  role              user_type          @default(admin)
  isActive          Boolean            @default(true)
  category          category[]
  location          location[]
  bussinessCategory businessCategory[]
}

model businessCategory {
  id            String          @id @default(cuid())
  title         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          user?           @relation(fields: userId, references: id)
  userId        String?
  category      category[]
  sellerProfile sellerProfile[]
  isActive      Boolean         @default(true)
}

model category {
  id                 String            @id @default(cuid())
  title              String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  businessCategory   businessCategory? @relation(fields: [businessCategoryID], references: [id])
  businessCategoryID String

  user           user?            @relation(fields: [userId], references: [id])
  userId         String?
  sellerProfile  sellerProfile[]
  subCategory    subCategory[]
  isActive       Boolean          @default(true)
  sellerCategory sellerCategory[]
}

model subCategory {
  id        String   @id @default(cuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category       category?        @relation(fields: [categoryId], references: [id])
  categoryId     String?
  isActive       Boolean          @default(true)
  sellerCategory sellerCategory[]
}

model location {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: userId, references: id)
  userId    String
  status    Boolean
}

//@seller

model sellerProfile {
  id                 String              @id @default(cuid())
  storeName          String?
  slug               String?
  phone              String?
  category           category?           @relation(fields: [categoryId], references: [id])
  seller             seller              @relation(fields: [sellerId], references: [id])
  sellerId           String              @unique
  categoryId         String?
  logo               Image?              @relation(fields: [logoId], references: [id])
  logoId             String?
  qrCode             qrCode?             @relation(fields: [qrCodeId], references: [id])
  qrCodeId           String?
  firstName          String?
  lastName           String?
  address            sellerAddress?
  account            sellerBankAccount[]
  gstIn              String?
  businessCategory   businessCategory?   @relation(fields: [businessCategoryId], references: [id])
  businessCategoryId String?
}

enum loginMethod {
  email
  google
}

model seller {
  id             String           @id @default(cuid())
  email          String           @unique
  password       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           user_type        @default(admin)
  isActive       Boolean          @default(true)
  isMailVerified Boolean          @default(false)
  emailToken     String?          @unique
  sellerProfile  sellerProfile?
  status         Boolean          @default(true)
  sellerCategory sellerCategory[]

  loginSession loginSession[]
  wareHouse    wareHouse[]

  loginMethod          loginMethod @default(email)
  product              product[]
  coupon               coupon[]
  Image                Image[]
  uniqueGoogleId       String?     @unique
  isSellerKycCompleted Boolean     @default(false)
  customer             customer[]
}

model loginSession {
  id         String      @id @default(cuid())
  user       seller      @relation(fields: userId, references: id)
  userId     String      @unique
  deviceInfo deviceInfo?
  latitude   String
  longitude  String
  deviceId   String
  city       String
  ipAddress  String
  token      String
  logout     Boolean     @default(false)
}

enum deviceType {
  web
  android
  ios
}

model deviceInfo {
  id             String       @id @default(cuid())
  user           loginSession @relation(fields: loginSessionId, references: id)
  loginSessionId String       @unique
  device         deviceType
}

model qrCode {
  id            String          @id @default(cuid())
  qrcode        String
  sellerProfile sellerProfile[]
}

model sellerAddress {
  addressLine1    String?
  addressLine2    String?
  landMark        String?
  state           String?
  city            String?
  pinCode         String?
  country         String?
  sellerProfile   sellerProfile @relation(fields: sellerProfileId, references: id)
  sellerProfileId String        @unique
}

model sellerBankAccount {
  id            String  @id @default(cuid())
  accountNumber String
  ifscCode      String
  bankName      String
  isPrimary     Boolean @default(false)

  sellerProfile   sellerProfile? @relation(fields: [sellerProfileId], references: [id])
  sellerProfileId String?
}

model Image {
  id          String   @id @default(cuid())
  url         String
  description String
  caption     String
  alt         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      seller   @relation(fields: [sellerId], references: [id])

  sellerProfile    sellerProfile[]
  sellerId         String
  sellerCategory   sellerCategory[]
  product          product?         @relation(fields: [productId], references: [id])
  productId        String?
  productVariant   productVariant?  @relation(fields: [productVariantId], references: [id])
  productVariantId String?
}

model sellerCategory {
  id            String @id @default(cuid())
  sort          Int    @default(autoincrement())
  description   String
  categoryImage Image? @relation(fields: [imageId], references: [id])
  seller        seller @relation(fields: sellerId, references: id)
  sellerId      String

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        Boolean      @default(true)
  imageId       String?
  product       product[]
  coupon        coupon?      @relation(fields: [couponId], references: [id])
  couponId      String?
  category      category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?
  subCategory   subCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?
}

model wareHouse {
  id            String   @id @default(cuid())
  gstIn         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  seller        seller?  @relation(fields: [sellerId], references: [id])
  sellerId      String
  wareHouseName String

  contactPerson String
  mobileNumber  String
  addressLine1  String
  addressLine2  String
  pinCode       String
  city          String
  state         String
  isActive      Boolean     @default(true)
  isPrimary     Boolean     @default(false)
  inventory     inventory[]
}

model ListOrder {
  id    String @id @default(cuid())
  title String

  productDetails   productDetails? @relation(fields: [productDetailsId], references: [id])
  productDetailsId String?
}

model sizeChart {
  id String @id @default(cuid())
}

model productDetails {
  id String @id @default(cuid())

  Specifications  ListOrder[]
  product         product?    @relation(fields: [productId], references: [id])
  legalDisclaimer String
  productId       String?     @unique
}

model inventory {
  id          String     @id @default(cuid())
  quantity    Int
  sku         String
  warehouse   wareHouse? @relation(fields: [wareHouseId], references: [id])
  wareHouseId String?

  product   product? @relation(fields: [productId], references: [id])
  productId String?  @unique
}

model productInformation {
  id          String @id @default(cuid())
  productName String

  price           Int
  discountedPrice Int
  productPerUnit  Int
  unit            String
  product         product? @relation(fields: [productId], references: [id])
  productId       String?  @unique
}

model product {
  id                 String              @id @default(cuid())
  productInformation productInformation?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  seller             seller?             @relation(fields: [sellerId], references: [id])
  sellerId           String
  status             Boolean             @default(false)
  productVariant     productVariant[]
  variant            variant[]
  isCancellable      Boolean             @default(false)
  isRefunable        Boolean             @default(false)
  sellerCategoryId   String
  productDetails     productDetails?
  productReview      productReview?
  img                Image[]
  coupon             coupon?             @relation(fields: [couponId], references: [id])
  couponId           String?
  free               free[]
  sellerCategory     sellerCategory      @relation(fields: [sellerCategoryId], references: [id])
  productSize        productSize?
  isActive           Boolean             @default(true)
  inventory          inventory?
}

model variant {
  id          String        @id @default(cuid())
  variantList variantList[]
  name        String
  type        String
  product     product?      @relation(fields: [productId], references: [id])
  productId   String?
}

model variantList {
  id        String   @id @default(cuid())
  value     String
  name      String?
  variant   variant? @relation(fields: [variantId], references: [id])
  variantId String?
}

model combination {
  id               String          @id @default(cuid())
  value            String
  name             String?
  productVariant   productVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?
}

model productVariant {
  id              String        @id @default(cuid())
  discountedPrice Int
  price           Int
  img             Image[]
  stock           Int
  product         product?      @relation(fields: [productId], references: [id])
  productId       String?
  combination     combination[]
}

model productSize {
  id        String  @id @default(cuid())
  image     String?
  title     String
  productId String  @unique

  product product @relation(fields: [productId], references: [id])
}

model productReview {
  id          String   @id @default(cuid())
  productName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Int
  title       String
  description String
  prouct      product? @relation(fields: [productId], references: [id])
  productId   String?  @unique
}

enum couponType {
  percentage
  flat
  shipping
  free
  getOneFree
}

model percentage {
  id                String   @id @default(cuid())
  percentage        String
  minimumOrderValue Int
  maximum           Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model flat {
  id                String @id @default(cuid())
  discountAmount    String
  minimumOrderValue Int
  amount            Int
}

model shipping {
  id String @id @default(cuid())
}

model free {
  id          String   @id @default(cuid())
  product     product? @relation(fields: [productId], references: [id])
  productId   String?
  aboveAmmout Int
}

model getOneFree {
  id           String @id @default(cuid())
  buy          Int
  get          Int
  usesPerOrder Int
}

enum usesPerCostomer {
  once
  costom
  unlimited
}

enum couponOn {
  all
  product
  category
}

model coupon {
  id               String           @id @default(cuid())
  usesPerCostomer  usesPerCostomer
  usesNumer        Int?
  seller           seller           @relation(fields: [sellerId], references: [id])
  sellerId         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  startDate        DateTime
  enddate          DateTime?
  couponType       couponType
  couponName       String
  couponOn         String           @default("all")
  couponOnCategory sellerCategory[]
  couponOnProduct  product[]
}

model customer {
  id        String           @id @default(cuid())
  firstName String
  lastName  String
  password  String?
  email     String
  phone     String
  address   customerAddress?
  seller    seller?          @relation(fields: [sellerId], references: [id])
  sellerId  String?
}

model customerAddress {
  id           String   @id @default(cuid())
  addressLine1 String?
  addressLine2 String?
  landMark     String?
  state        String?
  city         String?
  pinCode      String?
  country      String?
  customer     customer @relation(fields: customerId, references: id)
  customerId   String   @unique
}
