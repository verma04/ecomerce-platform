// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_type {
  admin
  manager
}

// @admin
model user {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      user_type  @default(admin)
  isActive  Boolean    @default(true)
  category  category[]
  location  location[]
}

model category {
  id            String          @id @default(cuid())
  title         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          user            @relation(fields: userId, references: id)
  userId        String
  subCategory   subCategory[]
  sellerProfile sellerProfile[]
}

model subCategory {
  id                 String    @id @default(cuid())
  title              String    @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  platformCategory   category? @relation(fields: [platformCategoryID], references: [id])
  platformCategoryID String

  isComplted Boolean @default(false)
}

model location {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: userId, references: id)
  userId    String
  status    Boolean
}

//@seller

model sellerProfile {
  id         String   @id @default(cuid())
  name       String?
  slug       String?
  phone      String?
  category   category @relation(fields: [categoryId], references: [id])
  seller     seller   @relation(fields: [sellerId], references: [id])
  sellerId   String
  categoryId String
  logo       Image?   @relation(fields: [logoId], references: [id])
  logoId     String
  qrCode     qrCode?  @relation(fields: [qrCodeId], references: [id])
  qrCodeId   String?
}

model seller {
  id              String            @id @default(cuid())
  email           String            @unique
  password        String?
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role            user_type         @default(admin)
  isActive        Boolean           @default(true)
  isMailVerified  Boolean           @default(false)
  emailToken      String            @unique
  sellerProfile   sellerProfile[]
  status          Boolean           @default(true)
  sellerCategory  sellerCategory[]
  kyc             sellerKyc?
  loginSession    loginSession[]
  sellerWareHouse sellerWareHouse[]

  product product[]
  coupon  coupon[]
  Image   Image[]
}

model loginSession {
  id         String      @id @default(cuid())
  user       seller      @relation(fields: userId, references: id)
  userId     String      @unique
  deviceInfo deviceInfo?
  latitude   String
  longitude  String
  deviceId   String
  city       String
  ipAddress  String
  token      String
  logout     Boolean     @default(false)
}

enum deviceType {
  web
  android
  ios
}

model deviceInfo {
  id             String       @id @default(cuid())
  user           loginSession @relation(fields: loginSessionId, references: id)
  loginSessionId String       @unique
  device         deviceType
}

model sellerKyc {
  id          String              @id @default(cuid())
  gstIn       String?
  user        seller              @relation(fields: userId, references: id)
  userId      String              @unique
  isCompleted Boolean             @default(false)
  address     sellerAddress?
  account     sellerBankAccount[]
}

model qrCode {
  id            String          @id @default(cuid())
  qrcode        String
  sellerProfile sellerProfile[]
}

model sellerAddress {
  addressLine1 String
  addressLine2 String
  landMark     String
  state        String
  city         String
  pinCode      String
  kyc          sellerKyc @relation(fields: sellerKycId, references: id)
  sellerKycId  String    @unique
}

model sellerBankAccount {
  accountNumber String
  ifscCode      String
  bankName      String

  kyc         sellerKyc @relation(fields: sellerKycId, references: id)
  sellerKycId String    @unique
}

model Image {
  id          String   @id @default(cuid())
  url         String
  description String
  caption     String
  alt         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      seller   @relation(fields: [sellerId], references: [id])

  mutipleImage   mutipleImage?
  sellerProfile  sellerProfile[]
  sellerId       String
  sellerCategory sellerCategory[]
  product        product[]
  array          allSize[]
  allColor       allColor[]
}

model mutipleImage {
  categoryImage    Image           @relation(fields: imageId, references: id)
  imageId          String          @unique
  sellerCategory   sellerCategory  @relation(fields: sellerCategoryId, references: id)
  sellerCategoryId String          @unique
  productVariant   productVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?
}

model sellerCategory {
  id            String         @id @default(cuid())
  sort          Int            @default(autoincrement())
  title         String
  description   String
  categoryImage Image          @relation(fields: [imageId], references: [id])
  seller        seller         @relation(fields: sellerId, references: id)
  sellerId      String
  sliderImage   mutipleImage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        Boolean        @default(true)
  coupon        coupon?        @relation(fields: [couponId], references: [id])
  couponId      String?
  imageId       String
  product       product[]
}

model sellerWareHouse {
  id           String   @id @default(cuid())
  gstIn        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  seller       seller?  @relation(fields: [sellerId], references: [id])
  sellerId     String
  addressLin1  String
  addressLine2 String
  landMark     String
  state        String
  city         String
  pinCode      String
  status       Boolean  @default(true)
}

model list {
  id          String @id @default(cuid())
  title       String
  description String

  ListOrder ListOrder?

  productDetails   productDetails? @relation(fields: [productDetailsId], references: [id])
  productDetailsId String?
}

model ListOrder {
  id     String  @id @default(cuid())
  title  String
  list   list?   @relation(fields: listId, references: id)
  listId String? @unique

  productDetails   productDetails? @relation(fields: [productDetailsId], references: [id])
  productDetailsId String?
}

model productDetails {
  id              String      @id @default(cuid())
  highlights      list[]
  Specifications  ListOrder[]
  product         product?    @relation(fields: [productId], references: [id])
  legalDisclaimer String
  productId       String?     @unique
}

model productSizeChart {
  id        String  @id @default(cuid())
  product   product @relation(fields: [productId], references: [id])
  productId String  @unique
}

model product {
  id              String           @id @default(cuid())
  productName     String
  productCategory sellerCategory   @relation(fields: [sellerCategoryId], references: [id])
  productImage    Image?           @relation(fields: [imageId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  seller          seller?          @relation(fields: [sellerId], references: [id])
  sellerId        String
  brandName       String
  status          Boolean          @default(false)
  productVariant  productVariant[]

  productReview    productReview?
  productDetails   productDetails?
  isCancellable    Boolean           @default(false)
  isRefunable      Boolean           @default(false)
  imageId          String?
  sellerCategoryId String
  productColor     productColor?
  productSize      productSize?
  productSizeChart productSizeChart?
}

model productColor {
  id        String  @id @default(cuid())
  image     String?
  title     String
  productId String  @unique

  array allColor[]

  product product @relation(fields: [productId], references: [id])
}

model productSize {
  id        String  @id @default(cuid())
  image     String?
  title     String
  productId String  @unique

  array   allSize[]
  product product   @relation(fields: [productId], references: [id])
}

model allSize {
  id            String           @id @default(cuid())
  title         String
  img           Image?           @relation(fields: [imageId], references: [id])
  imageId       String?
  productSize   productSize?     @relation(fields: [productSizeId], references: [id])
  productSizeId String?
  variant       productVariant[]
}

model allColor {
  id             String           @id @default(cuid())
  title          String
  img            Image?           @relation(fields: [imageId], references: [id])
  imageId        String?
  productColor   productColor?    @relation(fields: [productColorId], references: [id])
  productColorId String?
  productVariant productVariant[]
}

model productReview {
  id          String   @id @default(cuid())
  productName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Int
  title       String
  description String

  prouct    product? @relation(fields: [productId], references: [id])
  productId String?  @unique
}

model productVariant {
  id        String   @id @default(cuid())
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stock  Decimal
  mrp    Decimal
  price  Decimal
  sku    Int
  images mutipleImage[]

  product   product? @relation(fields: [productId], references: [id])
  productId String?

  size   allSize @relation(fields: [sizeId], references: [id])
  sizeId String

  color      allColor @relation(fields: [allColorId], references: [id])
  allColorId String
}

model coupon {
  id               String           @id @default(cuid())
  seller           seller           @relation(fields: [sellerId], references: [id])
  sellerId         String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  expired          DateTime
  offerPercent     Decimal
  miniMumValue     Decimal
  maxiMumValue     Decimal
  maxiNumDisccount Decimal
  category         sellerCategory[]
}
